services:
  consistency_check:
    restart: always
    environment:
      - SERVICE_NAME=consistency_check
      - CORS_ALLOW_ALL=no
    build:
      context: consistency_check
      dockerfile: Dockerfile
    ports: []
      # - "8300:8300"
    depends_on:
      - processing
      - analyzer
      - storage
    volumes:
      - ./logs:/consistency_check/log 
      - ./config:/config
      - ./data/consistency_check:/data/consistency_check

  dashboard:
    env_file: "./storage_prod.env"
    build:
      context: dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - processing
      - analyzer

  receiver:
    deploy:
      replicas: 3
    environment:
      - SERVICE_NAME=receiver
      - CORS_ALLOW_ALL=no
    build:
      context: receiver
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/receiver/log 
      - ./config:/config

  storage:
    environment:
      - SERVICE_NAME=storage
      - CORS_ALLOW_ALL=no
    env_file: "./storage_prod.env"
    build:
      context: storage
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mysql_db:
        condition: service_healthy
    # command: sh -c "python db_manage.py drop && exec python app.py"
    command: sh -c "python db_manage.py && exec python app.py"
    volumes:
      - ./logs:/storage/log 
      - ./config:/config

  mysql_db:
    image: mysql
    restart: always
    env_file: "./storage_prod.env"
    volumes:
      - ./data/database:/var/lib/mysql
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p$${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 3

  processing:
    environment:
      - SERVICE_NAME=processing
      - CORS_ALLOW_ALL=no
    build:
      context: processing
      dockerfile: Dockerfile
    depends_on:
      - storage
    volumes:
      - ./logs:/processing/log 
      - ./config:/config
      - ./data/processing:/data/processing

  analyzer:
    environment:
      - SERVICE_NAME=analyzer
      - CORS_ALLOW_ALL=no
    build:
      context: analyzer
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/analyzer/log 
      - ./config:/config
      - ./data/analyzer:/data/analyzer

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    volumes:
      - zookeeper_data:/data

  kafka:
    image: wurstmeister/kafka
    command: bash -c "rm -f /kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"  # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka  # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./data/kafka:/kafka
    depends_on:
      - "zookeeper"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:29092"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  zookeeper_data:
