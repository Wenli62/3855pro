services:
  receiver:
    environment:
      - SERVICE_NAME=receiver
    build:
      context: receiver
      dockerfile: Dockerfile
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/receiver/log 
      - ./config:/config

  storage:
    environment:
      - SERVICE_NAME=storage
    env_file: "./storage_prod.env"
    build:
      context: storage
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mysql_db:
        condition: service_healthy
    command: sh -c "python db_manage.py drop && exec python app.py"
    ports: []
    volumes:
      - ./logs:/storage/log 
      - ./config:/config

  mysql_db:
    image: mysql
    restart: always

    ports: []
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$${MYSQL_USER}", "-p$${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 3


  processing:
    environment:
      - SERVICE_NAME=processing
    build:
      context: processing
      dockerfile: Dockerfile
    depends_on:
      - storage
    ports:
      - "8100:8100"
    volumes:
      - ./logs:/processing/log 
      - ./config:/config
      - ./data/processing:/data/processing

  analyzer:
    environment:
      - SERVICE_NAME=analyzer
    build:
      context: analyzer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    ports:
      - "8200:8200"
    volumes:
      - ./logs:/analyzer/log 
      - ./config:/config
      - ./data/analyzer:/data/analyzer

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    volumes:
      - zookeeper_data:/data

  kafka:
    image: wurstmeister/kafka
    command: >
      bash -c "
        rm -f /kafka/kafka-logs-kafka/meta.properties && 
        start-kafka.sh
      "
    ports: []
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"  # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka  # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./data/kafka:/kafka
    depends_on:
      - "zookeeper"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:29092"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  zookeeper_data: